{
  "Navbar": {
    "home": "Home",
    "about": "About",
    "projects": "Projects",
    "toolsAndTechs": "Tools and Techs",
    "contact": "Contact"
  },
  "Home": {
    "title": "Welcome to My Portfolio",
    "description": "A passionate developer crafting modern and efficient solutions. Explore my projects and favorite technologies!",
    "techStackTitle": "My Tech Stack",
    "techStackDescription": "Here are some of the tools I use to build amazing applications:",
    "tech": {
      "javamail": "I send emails directly from Java applications using JavaMail, configuring SMTP servers for efficient communication.",
      "intl": "I use the Intl JavaScript API for internationalization, formatting dates, numbers, and strings in a multilingual way.",
      "docker": "I containerize applications with Docker and Docker Compose, ensuring consistency and scalability across environments.",
      "typescript": "I write safe, typed code with TypeScript, enhancing application robustness.",
      "tailwind": "I style interfaces quickly with Tailwind CSS, creating modern and responsive designs."
    },
    "contactPrompt": "Learn more in the Tools and Techs section!",
    "cta": "View My Projects"
  },
  "About": {
    "title": "About Us",
    "description": "Our neon-charged story"
  },
  "Projects": {
    "title": "My Projects",
    "description": "Here are some of the projects I’ve developed, showcasing my skills and passions.",
    "project1": {
      "title": "Weather App",
      "description": "The Weather App is a web application that allows users to check real-time weather for any city worldwide, using the OpenWeatherMap API for climate data and the Unsplash API for dynamic background images. Built with Next.js and TypeScript, it consumes external APIs via Axios, displaying details like temperature, humidity, wind speed, and weather description, alongside the country’s flag (via FlagsAPI). The design is responsive, styled with Tailwind CSS, and provides an immersive visual experience with images reflecting the searched city."
    },
    "project2": {
      "title": "Purchase Order Management System",
      "description": "The Purchase Order Management System is a backend application built with Java Spring Boot, designed to manage purchase orders through CRUD (Create, Read, Update, Delete) operations. Leveraging a RESTful architecture, it exposes endpoints to register, retrieve, update, and delete orders, integrating with a relational database via Spring Data JPA with Hibernate. I implemented robust validations using Bean Validation, efficient object-relational mapping (ORM), and transactional control to ensure data integrity. The API follows design patterns like DTOs (Data Transfer Objects) for encapsulation and security, providing a scalable foundation for e-commerce or ERP systems."
    }
  },
  "Contact": {
    "sendMessage": "Send Message",
    "title": "Contact Page",
    "myInfo": "My informations",
    "form": {
      "name": "Name",
      "email": "Email",
      "message": "Message"
    },
    "send": "Send",
    "sending": "Sending...",
    "successMessage": "Message sent successfully!",
    "errorMessage": "Error sending message. Please try again."
  },
  "Footer": {
    "about": "About",
    "description": "My tech portfolio created with integrated technologies using Next.js, Tailwind CSS, TypeScript, and Java Spring Boot.",
    "links": "Links",
    "contact": "Contact",
    "email": "jorgesoares2997@gmail.com",
    "rights": "© 2025 All rights reserved"
  },

  "Aboutpage": {
    "title": "About",
    "me": {
      "title": "About Me",
      "intro": "Hello, my name is Jorge Soares, and I’m pursuing a degree in Systems Analysis and Development with a deep curiosity for the tech world. I’ve been honing my skills by building full-stack applications, delivering end-to-end solutions.",
      "expertise1": "My expertise includes developing RESTful APIs with ",
      "expertise2": ", integrating features like JavaMail, Spring Security, and JWT for secure and efficient systems. I also use ",
      "expertise3": " to containerize my applications, ensuring scalability and seamless deployment.",
      "frontend1": "On the frontend, I craft responsive and dynamic platforms using ",
      "frontend2": ", styled with ",
      "frontend3": "I manage state with ",
      "frontend4": " and ensure robust typing with ",
      "database": "My database experience centers on ",
      "database2": ", enabling me to create reliable and optimized solutions.",
      "currently1": "Currently, I’m contributing as a programmer at ",
      "currently2": ", where I apply my skills to real-world projects.",
      "goal": "My goal is to expand my knowledge and develop mobile applications using ",
      "goal2": ", furthering my growth in the tech industry.",
      "connect": "I’m ready to connect with other professionals and contribute to meaningful projects that drive innovation and impact.",
      "and": "and"
    },
    "portfolio": {
      "title": "About This Portfolio",
      "intro": "This portfolio is a reflection of my journey as a full-stack developer. Built with ",
      "intro2": ", it leverages ",
      "intro3": " for a modern and responsive design.",
      "frontend1": "On the frontend, I implemented state management with ",
      "frontend2": " to handle translations and authentication, while the internationalization system was built from scratch with support for multiple languages (Portuguese, English, and Spanish).",
      "frontend3": "Subtle animations and a neon theme were inspired by cyberpunk aesthetics, delivering a unique visual experience.",
      "backend1": "On the backend, I developed a RESTful API with ",
      "backend2": ", hosted on Render",
      "backend3": "It supports social authentication via OAuth 2.0 with Google, LinkedIn, GitHub, and Apple, plus email and WhatsApp messaging using ",
      "backend4": " for security.",
      "goal": "The goal of this project was to showcase my ability to create complete solutions, from conception to deployment, integrating frontend, backend, and external services efficiently and scalably."
    },
    "and": " and "
  },
  "ToolsAndTechs": {
    "title": "Tools and Technologies",
    "flagsLabel": "Choose language:",
    "tech1": {
      "title": "JavaMail",
      "description": "JavaMail is a widely used API for sending and receiving emails in Java applications. It enables the configuration of SMTP, POP, and IMAP servers, ensuring efficient and secure communication. Major companies such as Oracle, IBM, and Red Hat use JavaMail-based solutions to manage corporate email systems and automated notifications."
    },
    "tech2": {
      "title": "Intl (JavaScript)",
      "description": "The `Intl` API is a native JavaScript toolset that provides powerful internationalization (i18n) capabilities, enabling the formatting of dates, numbers, and strings based on different languages and regions. I leverage `Intl` to build consistent multilingual experiences, such as formatting currency values (e.g., `Intl.NumberFormat`), dates (e.g., `Intl.DateTimeFormat`), and locale-sensitive string comparisons (e.g., `Intl.Collator`). In this application, `Intl` could complement the manual translation system, ensuring dynamic elements like dates or prices are displayed correctly for each language (Portuguese, English, and Spanish). It’s a lightweight, built-in solution that eliminates the need for external libraries for common i18n tasks."
    },
    "tech3": {
      "title": "Docker and Docker Compose",
      "description": "Docker is a containerization platform I use to encapsulate applications and their dependencies into lightweight, portable containers, ensuring consistency across development, testing, and production environments. With Docker Compose, I orchestrate multiple containers effortlessly by defining services, networks, and volumes in a YAML file. For example, in this application, I could containerize the frontend (Next.js), backend (Spring Boot), and an SMTP service (like MailHog) in a single `docker-compose.yml`, enabling startup with one command (`docker-compose up`). This simplifies deployment on platforms like Render or locally, reducing configuration issues and enhancing scalability."
    },
    "tech4": {
      "title": "Axios (API Consumption)",
      "description": "Axios is a promise-based HTTP library I use to consume APIs efficiently and robustly in web applications. With support for GET, POST requests, and error handling, Axios simplifies integration with external services like OpenWeatherMap for weather data and Unsplash for dynamic images. In this project, I implemented asynchronous calls to fetch real-time data, handling JSON responses and dynamically updating the UI. The example beside demonstrates how Axios retrieves a city’s weather and a background image, showcasing its ease of use and flexibility."
    },
    "tech5": {
      "title": "Amazon S3 (Cloud Storage)",
      "description": "All images and videos on this site are stored in an Amazon S3 (Simple Storage Service) bucket, a highly scalable and durable cloud storage service from AWS. S3 provides an object storage infrastructure that allows hosting files securely, accessibly, and cost-effectively, with 99.999999999% durability. I use S3 to centralize multimedia assets, leveraging its integration with web applications through public or pre-signed URLs, as well as its ability to scale automatically with traffic. This service is crucial for ensuring low latency, high availability, and reliable backups, optimizing performance and user experience in distributed projects."
    },
    "tech6": {
      "title": "JWT (JSON Web Tokens)",
      "description": "I use JSON Web Tokens (JWT) for secure authentication and authorization in this project’s backend, built with Java Spring Boot. JWT is an open standard that encapsulates user information in a digitally signed token, consisting of a header, payload, and signature, ensuring integrity and authenticity. After login, the token is generated and sent to the client, which uses it in subsequent requests via the Authorization header. Its importance in robust websites lies in its statelessness, enabling horizontal scalability without server-side session storage, plus efficient validation and protection against attacks like CSRF and XSS when properly configured."
    },
    "tech7": {
      "title": "Zustand (State Management)",
      "description": "Zustand is a lightweight state management library I use in this site’s frontend, built with Next.js. Unlike heavier solutions like Redux, Zustand provides a minimalist, reactive API based on hooks to manage global states like language and themes. In this project, I implemented translation control with Zustand, enabling real-time updates without unnecessary re-renders. Its importance for robust websites lies in its simplicity, optimized performance (avoiding boilerplate), and scalability, making it ideal for modern applications requiring efficient and maintainable state management."
    },
    "tech8": {
      "title": "OpenID (Decentralized Authentication)",
      "description": "OpenID is a decentralized authentication protocol I integrated into this project to provide secure login via external identity providers like Google or Auth0. Based on OAuth 2.0, OpenID Connect adds an identity layer to the authorization flow, returning an ID Token that authenticates the user. In the Spring Boot backend, I configured OpenID support to validate tokens and manage sessions, reducing the need for a local login system. Its importance in robust websites lies in enhanced security, interoperability with popular services, and user experience, enabling fast, reliable authentication without direct password management."
    },
    "tech9": {
      "title": "React Joyride",
      "description": "A library for React that enables the creation of interactive tutorials and step-by-step guides in your web application. Perfect for enhancing user experience by introducing features or highlighting updates, with customizable tooltips and continuous navigation support."
    }
  },
  "Form": {
    "toPlaceholder": "Enter the recipient's email",
    "subjectPlaceholder": "Enter the subject",
    "bodyPlaceholder": "Enter your message",
    "submitButton": "Send",
    "sending": "Sending...",
    "success": "Message sent successfully: ",
    "error": "Error sending: ",
    "invalidEmail": "Invalid email"
  }
}
